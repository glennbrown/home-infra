---

target_os: debian #proxmox
hostname_odin: odin

# geerlingguy.ntp
ntp_daemon: chrony
ntp_package: chrony

bash_aliases:
  - { alias: "dtail", command: "docker logs -tf --tail='50' " }
  - { alias: "dstop", command: "docker stop `docker ps -aq`" }
  - { alias: "drm", command: "docker rm `docker ps -aq`" }
  - { alias: "dcp", command: "docker compose -f ~/docker-compose.yml " }
  - { alias: "dcporph", command: "docker compose -f ~/docker-compose.yml --remove-orphans " }
  - { alias: "dprune", command: "docker image prune" }
  - { alias: "dprunesys", command: "docker system prune --all"}
  - { alias: "ctop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop " }
  

# grog.package
package_list_group:
  - name: bash-completion
  - name: apt-file
  - name: aptitude
  - name: btrfs-progs
  - name: curl
  - name: command-not-found
  - name: dnsutils
  - name: diceware
  - name: fio
  - name: git
  - name: hddtemp
  - name: htop
  - name: ffmpeg
  - name: iftop
  - name: intel-gpu-tools
  - name: iotop
  - name: lm-sensors
  - name: mc
  - name: mutt
  - name: ncdu
  - name: net-tools
  - name: nfs-kernel-server
  - name: nmap
  - name: nvme-cli
  - name: openssh-server
  - name: python3
  - name: python3-apt
  - name: python-setuptools
  - name: screen
  - name: smartmontools
  - name: sudo
  - name: tmux
  - name: tree
  - name: wget
  - name: xfsprogs
  - name: zfsutils-linux

# grog.group
group_list_group:
  - { name: kbrown, gid: 1001, state: present }
  - { name: prometheus, gid: 180, state: present }

# grog.user
user_list_group:
  - name: kbrown
    uid: 1001
    group: kbrown
    groups:
      - users
    append: yes
    shell: /bin/false
    comment: "Kristen Brown"
    state: present
  - name: dockeruser
    uid: 99
    group: users
    shell: /bin/bash
    append: yes
    groups: 
      - video
  - name: prometheus
    group: prometheus
    uid: 180
    shell: /usr/sbin/nologin
    home: /
    comment: "Prometheus daemon"
    append: false
    state: present

# geerlingguy.docker
docker_install_compose: false
docker_install_compose_plugin: true 
docker_users: gbrown

# kgb-odin
# TODO: change secret to 1password lookup
odin_main_storage_path: /mnt/storage
extra_mountpoints:
  - { path: /mnt/nvme1tb, diskbyid: /dev/disk/by-id/nvme-WDBRPG0010BNC-WRSN_21500K802847-part1, fs: ext4, opts: "defaults,discard" }
samba_users:
  - username: gbrown
    password: "{{ secret_samba_gbrown }}"
  - username: kbrown
    password: "{{ secret_samba_kbrown }}"

# ironicbadger.snapraid + kgb-odin
snapraid_runner: true
snapraid_install: true
snapraid_parity_disks:
  - { path: /mnt/parity1, diskbyid: /dev/disk/by-id/ata-WDC_WD120EDAZ-11F3RA0_5PJGZA3D-part1, fs: xfs, opts: defaults, content: false }

snapraid_data_disks:
  - { path: /mnt/disk1, diskbyid: /dev/disk/by-id/ata-WDC_WD120EDAZ-11F3RA0_5PJGRG9D-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk2, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_JEJUB8YZ-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk3, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_JEK67U5N-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk99, diskbyid: /dev/disk/by-id/ata-WDC_WD10EZEX-08WN4A0_WD-WCC6Y3RK0N3F-part1, fs: ext4, opts: defaults, content: false }

snapraid_config_excludes:
  - "*.unrecoverable"
  - "/tmp/"
  - "/lost+found/"
  - "downloads/"
  - "appdata/"
  - "*.!sync"
  - ".AppleDouble"
  - "._AppleDouble"
  - ".DS_Store"
  - "._.DS_Store"
  - ".Thumbs.db"
  - ".fseventsd"
  - ".Spotlight-V100"
  - ".TemporaryItems"
  - ".Trashes"
  - ".AppleDB"
  - ".nfo"

# tigattack.mergerfs
mergerfs_install_mode: github_releases
mergerfs_version: 2.35.1
mergerfs_mounts:
  - path: /mnt/storage
    branches: 
      - /mnt/disk*
      - /mnt/nvme1tb
      - /mnt/tank/fuse
    options: "defaults,nonempty,allow_other,use_ino,moveonenospc=true,category.create=epmfs,dropcacheonclose=true,minfreespace=250G,fsname=mergerfs"
  - path: /mnt/jbod
    branches:
      - /mnt/disk*
    options: "defaults,nonempty,allow_other,use_ino,moveonenospc=true,category.create=epmfs,dropcacheonclose=true,minfreespace=250G,fsname=jbod"

# geerlingguy.nfs
nfs_exports: [ "/mnt/storage    *(rw,sync,no_root_squash,fsid=25)" ]

# prometheus.prometheus.node_exporter
node_exporter_textfile_dir: /var/lib/node-exporter
node_exporter_version: 1.5.0
node_exporter_system_group: prometheus
node_exporter_system_user: prometheus

# ironicbadger.docker_compose_generator
appdata_path: /mnt/nvme1tb/appdata
storage_path: /mnt/storage
download_path: "{{ storage_path }}/downloads"
container_config_path: /config

containers:
  ###
  - service_name: plex
    active: true
    image: plexinc/pms-docker
    container_name: plex
    include_global_env_vars: false
    environment:
      - "TZ={{ ntp_timezone }}"
      - "PLEX_CLAIM={{ plex_claim_token }}"
      - PLEX_UID=99
      - PLEX_GID=100
    volumes:
      - "{{ appdata_path }}/plexmediaserver:{{ container_config_path }}"
      - "{{ storage_path }}/TV Shows:/tv:ro"
      - "{{ storage_path }}/Movies:/movies:ro"
    tmpfs:
      - /transcode:size=32G,mode=0777
    devices:
      - /dev/dri:/dev/dri
    network_mode: host
    restart: unless-stopped
  ###
  - service_name: tautulli
    active: true
    image: tautulli/tautulli
    container_name: tautulli
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/tautulli:{{ container_config_path }}"
    ports:
      - 8181:8181
    network_mode: bridge
    restart: unless-stopped
    depends_on:
      - plex
  ###
  - service_name: jellyfin
    active: true
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    include_global_env_vars: true
    environment:
      - JELLYFIN_PublishedServerUrl=192.168.17.10
    volumes:
      - "{{ appdata_path }}/jellyfin:{{ container_config_path }}"
      - "{{ storage_path }}/TV Shows:/data/tv:ro"
      - "{{ storage_path }}/Movies:/data/movies:ro"
    devices:
      - /dev/dri:/dev/dri
    ports:
      - 8096:8096
      - 8920:8920
      - 7359:7359/udp
      - 1900:1900/udp
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: sabnzbd
    active: true
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/sabnzbd:{{ container_config_path }}"
      - "{{ download_path }}:/downloads"
    ports:
      - 8080:8080
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: qbittorrent
    active: true
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    include_global_env_vars: true
    environment:
      - WEBUI_PORT=8088
    volumes:
      - "{{ appdata_path }}/qbittorrent:{{ container_config_path }}"
      - "{{ download_path }}:/downloads"
    ports:
      - 8088:8088
      - 6881:6881
      - 6881:6881/udp
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: prowlarr
    active: true
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/prowlarr:{{ container_config_path }}"
    ports:
      - 9696:9696
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: sonarr
    active: true
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/sonarr:{{ container_config_path }}"
      - "{{ download_path }}:/downloads"
      - "{{ storage_path }}/TV Shows:/tv"
    ports:
      - 8989:8989
    network_mode: bridge
    restart: unless-stopped
    depends_on:
      - sabnzbd
      - qbittorrent
      - prowlarr
  ###
  - service_name: radarr
    active: true
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/radarr:{{ container_config_path }}"
      - "{{ download_path }}:/downloads"
      - "{{ storage_path }}/Movies:/movies"
    ports:
      - 7878:7878
    network_mode: bridge
    restart: unless-stopped
    depends_on:
      - sabnzbd
      - prowlarr
      - qbittorrent
  ###
  - service_name: jellyplex-watched
    active: true
    image: luigi311/jellyplex-watched
    container_name: jellyplex-watched
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/jellyplex-watched/env:/app/.env"
    network_mode: bridge
    restart: unless-stopped
    depends_on:
      - jellyfin
      - plex
  ###
  - service_name: speedtest-tracker
    active: true
    image: ghcr.io/alexjustesen/speedtest-tracker
    container_name: speedtest-tracker
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/speedtest-tracker:{{ container_config_path }}"
    ports:
      - 6443:443
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: prometheus
    active: true
    image: prom/prometheus
    container_name: prometheus
    include_global_env_vars: false
    environment:
      - "TZ={{ ntp_timezone }}"
    volumes:
      - "{{ appdata_path }}/prometheus/data:/prometheus"
      - "{{ appdata_path }}/prometheus/etc:/etc/prometheus"
    ports:
      - 9090:9090
    network_mode: bridge
    command:
      - "'--storage.tsdb.retention.time=1y'"
      - "'--config.file=/etc/prometheus/prometheus.yml'"
      - "'--storage.tsdb.path=/prometheus'"
      - "'--web.enable-admin-api'"
    restart: unless-stopped
  ###
  - service_name: influxdb
    active: true
    image: influxdb:1.8-alpine
    container_name: influxdb
    include_global_env_vars: false
    environment:
      - "TZ={{ ntp_timezone }}"
    volumes:
      - "{{ appdata_path }}/influxdb:/var/lib/influxdb"
    ports:
      - 8086:8086
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: telegraf
    active: true
    image: telegraf:alpine
    container_name: telegraf
    cap_add:
      - NET_RAW
    include_global_env_vars: false
    environment:
      - "TZ={{ ntp_timezone }}"
      - HOST_MOUNT_PREFIX=/rootfs
      - HOST_ETC=/rootfs/etc
      - HOST_SYS=/rootfs/sys
      - HOST_PROC=/rootfs/proc
      - HOST_VAR=/rootfs/var
      - HOST_RUN=/rootfs/run
    volumes:
      - "{{ appdata_path }}/telegraf:/etc/telegraf:ro"
      - /:/rootfs:ro
    network_mode: host
    restart: unless-stopped
  ###
  - service_name: cadvisor
    active: true
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    include_global_env_vars: false
    environment:
      - "TZ={{ ntp_timezone }}"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      - 9099:9099
    network_mode: bridge
    command: '-port 9099'
    restart: unless-stopped
  ###
  - service_name: moto-exporter
    active: true
    image: ghcr.io/jahkeup/prometheus-moto-exporter:main
    container_name: moto-exporter
    include_global_env_vars: false
    environment:
      - "TZ={{ ntp_timezone }}"
      - "MOTO_PASSWORD={{ modem_secret }}"
    ports:
      - 9731:9731
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: varken
    active: true
    image: boerderij/varken
    container_name: varken
    include_global_env_vars: false
    environment:
      - "TZ={{ ntp_timezone }}"
    volumes:
      - "{{ appdata_path }}/varken:{{ container_config_path }}"
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: grafana
    active: true
    image: grafana/grafana-oss
    container_name: grafana
    include_global_env_vars: false
    environment:
      - "TZ={{ ntp_timezone }}"
      - "GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-singlestat-panel,grafana-worldmap-panel,marcusolsson-json-datasource,dalvany-image-panel,grafana-clock-panel,grafana-simple-json-datasource"
      - "GF_SECURITY_ADMIN_PASSWORD={{ grafana_secret }}"
      - "GF_SERVER_ROOT_URL=http://192.168.17.10:3000"
    volumes:
      - "{{ appdata_path }}/grafana:/var/lib/grafana"
    ports:
      - 3000:3000
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: py-kms
    active: true
    image: ghcr.io/py-kms-organization/py-kms:latest
    container_name: py-kms
    include_global_env_vars: false
    environment:
      - "TZ={{ ntp_timezone }}"
    volumes:
      - "{{ appdata_path }}/py-kms/db:/home/py-kms/db"
      - /etc/localtime:/etc/localtime
    ports:
      - 1688:1688
    network_mode: bridge
    restart: unless-stopped
  ###
  - service_name: watchtower
    active: true
    image: containrrr/watchtower
    container_name: watchtower
    include_global_env_vars: false
    environment:
      - TZ={{ ntp_timezone }}
      - WATCHTOWER_SCHEDULE=0 0 2 * * SAT
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL={{ watchtower_discord_url }}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    network_mode: bridge
    restart: unless-stopped